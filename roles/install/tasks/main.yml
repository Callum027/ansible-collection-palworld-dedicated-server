---

- name: Set common default variables
  ansible.builtin.import_role:
    name: common

- name: Create install directory
  ansible.builtin.file:
    path: "{{ palworld_dedicated_server_install_directory }}"
    state: directory
    owner: "{{ palworld_dedicated_server_install_directory_owner }}"
    group: "{{ palworld_dedicated_server_install_directory_group }}"
    mode: "{{ palworld_dedicated_server_install_directory_mode }}"

- name: Create data directory
  ansible.builtin.file:
    path: "{{ palworld_dedicated_server_install_directory }}/data"
    state: directory
    owner: 1000
    group: 1000
    mode: "750"

- name: Create compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ palworld_dedicated_server_install_directory }}/docker-compose.yml"
    owner: "{{ palworld_dedicated_server_install_compose_file_owner }}"
    group: "{{ palworld_dedicated_server_install_compose_file_group }}"
    mode: "{{ palworld_dedicated_server_install_compose_file_mode }}"

- name: Validate compose file
  ansible.builtin.command:
    cmd: docker compose --file docker-compose.yml config --quiet
    chdir: "{{ palworld_dedicated_server_install_directory }}"
  changed_when: false
  when: not ansible_check_mode

- name: Start services (When not running in Molecule using Docker)
  when: not palworld_dedicated_server_molecule_docker
  block:
    - name: Check that the compose file exists (for check mode)
      ansible.builtin.stat:
        path: "{{ palworld_dedicated_server_install_directory }}/docker-compose.yml"
      register: palworld_dedicated_server_temp_compose_file
      failed_when:
        - not ansible_check_mode
        - not (palworld_dedicated_server_temp_compose_file.stat.isreg | default(False))
    - name: Start services (skipped if in check mode and the compose file does not exist)
      community.docker.docker_compose_v2:
        project_src: "{{ palworld_dedicated_server_install_directory }}"
        state: present  # Run 'docker compose up'.
        # Unless overridden by the collection, use the pull policy defined in the compose file.
        pull: "{{ palworld_dedicated_server_temp_pull_policy | default('policy', true) }}"
        recreate: auto  # Only recreate the service when changes are detected in the compose file.
      when: not ansible_check_mode or (palworld_dedicated_server_temp_compose_file.stat.isreg | default(False))
    - name: Wait until the RCON port is open (if enabled)
      ansible.builtin.wait_for:
        port: "{{ palworld_dedicated_server_rcon_port }}"
        timeout: "{{ palworld_dedicated_server_rcon_wait_timeout }}"
      when: palworld_dedicated_server_rcon_enable
