---

- name: Set common default variables
  ansible.builtin.import_role:
    name: common

- name: Create service user (if enabled)
  when: palworld_dedicated_server_service_user_enable
  block:
    - name: Create service group
      ansible.builtin.group:
        name: "{{ palworld_dedicated_server_service_group_name }}"
        gid: "{{ palworld_dedicated_server_service_group_gid | default(omit, true) }}"
    - name: Create service user
      ansible.builtin.user:
        name: "{{ palworld_dedicated_server_service_user_name }}"
        uid: "{{ palworld_dedicated_server_user_uid | default(omit, true) }}"
        group: "{{ palworld_dedicated_server_service_group_name }}"
        groups: "{{ palworld_dedicated_server_service_user_additional_groups }}"
        home: "{{ palworld_dedicated_server_install_directory }}"
        create_home: false
        shell: /usr/sbin/nologin
    - name: Get service user metadata
      block:
        - name: Get service user metadata
          ansible.builtin.getent:
            database: passwd
            key: "{{ palworld_dedicated_server_service_user_name }}"
        - name: Set container user UID and GID to the service user
          ansible.builtin.set_fact:
            palworld_dedicated_server_temp_uid: "{{ getent_passwd['palworld'][1] | int }}"
            palworld_dedicated_server_temp_gid: "{{ getent_passwd['palworld'][2] | int }}"
      rescue:
        - name: Fail if getting service user metadata failed, and not running in check mode
          ansible.builtin.assert:
            that:
              - ansible_check_mode
            success_msg: Service user does not exist, setting placeholder UID and GID for check mode
            fail_msg: >-
              Getting metadata for service user '{{ palworld_dedicated_server_service_user_name }}' failed,
              check that the service user was created properly
            quiet: true
        - name: Set container user UID and GID to placeholders (if in check mode, and service user does not exist)
          ansible.builtin.set_fact:
            palworld_dedicated_server_temp_uid: "{{ palworld_dedicated_server_user_uid | default(1234, true) }}"
            palworld_dedicated_server_temp_gid: "{{ palworld_dedicated_server_group_gid | default(1234, true) }}"

- name: Set container user UID and GID to defaults (if service user is disabled)
  ansible.builtin.set_fact:
    palworld_dedicated_server_temp_uid: "{{ palworld_dedicated_server_container_default_uid }}"
    palworld_dedicated_server_temp_gid: "{{ palworld_dedicated_server_container_default_gid }}"
  when: not palworld_dedicated_server_service_user_enable

- name: Create install directory
  ansible.builtin.file:
    path: "{{ palworld_dedicated_server_install_directory }}"
    state: directory
    owner: "{{ palworld_dedicated_server_install_directory_owner }}"
    group: "{{ palworld_dedicated_server_install_directory_group }}"
    mode: "{{ palworld_dedicated_server_install_directory_mode }}"

- name: Check if the data directory exists
  ansible.builtin.stat:
    path: "{{ palworld_dedicated_server_install_directory }}/data"
  register: palworld_dedicated_server_temp_data_dir_stat

- name: Check if the data directory will be modified
  ansible.builtin.file:
    path: "{{ palworld_dedicated_server_install_directory }}/data"
    state: directory
    owner: "{{ palworld_dedicated_server_temp_uid }}"
    group: "{{ palworld_dedicated_server_temp_gid }}"
    mode: "750"
  register: palworld_dedicated_server_temp_data_dir

- name: Check if files within the data directory will have their owner/group changed
  ansible.builtin.file:
    path: "{{ palworld_dedicated_server_install_directory }}/data"
    owner: "{{ palworld_dedicated_server_temp_uid }}"
    group: "{{ palworld_dedicated_server_temp_gid }}"
    recurse: true
  register: palworld_dedicated_server_temp_data_files
  when: palworld_dedicated_server_temp_data_dir_stat.stat.isdir | default(False)

- name: Create compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ palworld_dedicated_server_install_directory }}/docker-compose.yml"
    owner: "{{ palworld_dedicated_server_install_compose_file_owner }}"
    group: "{{ palworld_dedicated_server_install_compose_file_group }}"
    mode: "{{ palworld_dedicated_server_install_compose_file_mode }}"
  register: palworld_dedicated_server_temp_compose_file

- name: Validate compose file
  ansible.builtin.command:
    cmd: docker compose --file docker-compose.yml config --quiet
    chdir: "{{ palworld_dedicated_server_install_directory }}"
  changed_when: false
  when: not ansible_check_mode

- name: Disable services (if any services files or directories will be, or have been modified)  # noqa: no-handler
  ansible.builtin.include_role:
    name: disable
  when: >-
    palworld_dedicated_server_temp_data_dir.changed
    or palworld_dedicated_server_temp_data_files.changed
    or palworld_dedicated_server_temp_compose_file.changed

- name: Create data directory
  ansible.builtin.file:
    path: "{{ palworld_dedicated_server_install_directory }}/data"
    state: directory
    owner: "{{ palworld_dedicated_server_temp_uid }}"
    group: "{{ palworld_dedicated_server_temp_gid }}"
    mode: "750"

- name: Recursively set owner/group on all data directory files
  ansible.builtin.file:
    path: "{{ palworld_dedicated_server_install_directory }}/data"
    owner: "{{ palworld_dedicated_server_temp_uid }}"
    group: "{{ palworld_dedicated_server_temp_gid }}"
    recurse: true

- name: Check that the compose file exists
  ansible.builtin.stat:
    path: "{{ palworld_dedicated_server_install_directory }}/docker-compose.yml"
  register: palworld_dedicated_server_temp_compose_file
  failed_when:
    - not ansible_check_mode
    - not (palworld_dedicated_server_temp_compose_file.stat.isreg | default(False))

- name: Start services
  community.docker.docker_compose_v2:
    project_src: "{{ palworld_dedicated_server_install_directory }}"
    state: present  # Run 'docker compose up'.
    # Unless overridden by the collection, use the pull policy defined in the compose file.
    pull: "{{ palworld_dedicated_server_temp_pull_policy | default('policy', true) }}"
    recreate: auto  # Only recreate the service when changes are detected in the compose file.
  when: not ansible_check_mode or (palworld_dedicated_server_temp_compose_file.stat.isreg | default(False))

- name: Wait until the RCON port is open (if enabled)
  ansible.builtin.wait_for:
    port: "{{ palworld_dedicated_server_rcon_bind_port }}"
    timeout: "{{ palworld_dedicated_server_rcon_wait_timeout }}"
  when: palworld_dedicated_server_rcon_enable
- name: Wait until the Prometheus exporter port is open (if enabled)
  ansible.builtin.wait_for:
    port: "{{ palworld_dedicated_server_exporter_bind_port }}"
    timeout: "{{ palworld_dedicated_server_exporter_wait_timeout }}"
  when: palworld_dedicated_server_exporter_enable
